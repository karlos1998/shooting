name: Build and Deploy Shooting Application

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 23
        uses: actions/setup-java@v2
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Build Docker image
        run: |
          docker build -t shooting-backend:${{ github.sha }} .

      - name: Save Docker image
        run: docker save shooting-backend:${{ github.sha }} | gzip > shooting-backend.tar.gz

      - name: Create tag file
        run: echo "${{ github.sha }}" > TAG

      - name: Deploy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          source: "shooting-backend.tar.gz,./docker-compose.production.yml,TAG"
          target: "~/containers/shooting"

      - name: Start application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            cd ~/containers/shooting

            # Przygotowanie i czyszczenie środowiska
            export TAG=$(cat TAG)
            echo "Deploying version $TAG"

            # Zatrzymanie i usunięcie obecnie działających kontenerów
            docker-compose -f docker-compose.production.yml down || true

            # Usunięcie starych obrazów
            docker image prune -a -f --filter "until=24h" || true
            docker rmi $(docker images -q shooting-backend | grep -v $TAG) || true

            # Załaduj nowy obraz i uruchom
            docker load < shooting-backend.tar.gz
            docker-compose -f docker-compose.production.yml up -d

            # Inicjalizacja bazy danych
            docker-compose -f docker-compose.production.yml run app java -jar /app.jar --init-db
